
Функция templateURLGetCatalog(Запрос)
	
	ProductID=Запрос["ПараметрыЗапроса"].Получить("ProductID");
	GroupID=Запрос["ПараметрыЗапроса"].Получить("GroupID");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура.Родитель КАК Группа,
	|	ТоварыНаСкладахОстатки.Номенклатура.Родитель.Код КАК ГруппаКод,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Номенклатура.Код КАК НоменклатураКод,
	|	ТоварыНаСкладахОстатки.Номенклатура.Цвет КАК Цвет,
	|	ТоварыНаСкладахОстатки.Номенклатура.Цвет.Код КАК ЦветКод,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.Склад.Код КАК СкладКод,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, ##УсловиеОтбора##) КАК ТоварыНаСкладахОстатки";
	
	Если НЕ ProductID=Неопределено Тогда  
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"##УсловиеОтбора##","Номенклатура В ИЕРАРХИИ (&СписокНоменклатуры)");
		СписокНоменклатуры=Новый СписокЗначений;
		СписокНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ProductID)));
		Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
	ИначеЕсли НЕ GroupID=Неопределено Тогда  
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"##УсловиеОтбора##","Номенклатура В ИЕРАРХИИ (&СписокНоменклатуры)");
		СписокНоменклатуры=Новый СписокЗначений;
		СписокНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду(СокрЛП(GroupID)));
		Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);	
	иначе
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"##УсловиеОтбора##","");
	КонецЕсли;	
	
	Запрос.Текст=ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	массив = Новый Массив;
	сч=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		данные = Новый Структура;
		данные.Вставить("GroupID",СокрЛП(ВыборкаДетальныеЗаписи.ГруппаКод)); 
		данные.Вставить("GroupName", СокрЛП(ВыборкаДетальныеЗаписи.Группа));
		данные.Вставить("ProductID", СокрЛП(ВыборкаДетальныеЗаписи.НоменклатураКод));
		данные.Вставить("ProductART", СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.Артикул));
		данные.Вставить("ProductName", СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура));
		данные.Вставить("ProductDescription", СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.ДополнительноеОписаниеНоменклатуры));
		данные.Вставить("ColorID", СокрЛП(ВыборкаДетальныеЗаписи.ЦветКод));
		данные.Вставить("ColorName", СокрЛП(ВыборкаДетальныеЗаписи.Цвет));
		данные.Вставить("StoreID", СокрЛП(ВыборкаДетальныеЗаписи.СкладКод));
		данные.Вставить("StoreName", СокрЛП(ВыборкаДетальныеЗаписи.Склад));
		данные.Вставить("Quantity", ВыборкаДетальныеЗаписи.КоличествоОстаток);
		
		ДФ_ТГБот.ДобавитьЦеныНоменклатуры(данные,ВыборкаДетальныеЗаписи.Номенклатура);
		
		
		//Если НЕ Image=Неопределено И Image="1" Тогда 	
		//	ОсновноеИзображение=ВыборкаДетальныеЗаписи.Номенклатура.ОсновноеИзображение.Хранилище.Получить();
		//	Если НЕ ОсновноеИзображение=Неопределено Тогда 
		//		ФотоBase64 = Base64Строка(ОсновноеИзображение.ПолучитьДвоичныеДанные());
		//		ФотоBase64 = СтрЗаменить(ФотоBase64, Символы.ВК, "");
		//		ФотоBase64 = СтрЗаменить(ФотоBase64, Символы.ПС, "");
		//	Иначе 
		//		ФотоBase64="";	
		//	КонецЕсли;
		//	данные.Вставить("ProductImage", ФотоBase64);
		//КонецЕсли;	
		
		массив.Добавить(данные);
		
		//сч=сч+1;
		//Если сч=20 Тогда Прервать; КонецЕсли;
	КонецЦикла;
	
	
	
	
	////Номенклатуры = Справочники.Номенклатура.Выбрать();
	//
	// //Пока Номенклатуры.Следующий() Цикл
	//      данные = Новый Структура;
	//	  данные.Вставить("ID", "123"); 
	//	  данные.Вставить("Name", "товар1"); 
	//      //данные.Вставить("Img", Номенклатуры.ОсновноеИзображение.Хранилище.Получить()); 
	//      массив.Добавить(данные);
	//	  данные = Новый Структура;
	//	  данные.Вставить("ID", "222"); 
	//	  данные.Вставить("Name", "товар2"); 
	//      //данные.Вставить("Img", Номенклатуры.ОсновноеИзображение.Хранилище.Получить()); 
	//      массив.Добавить(данные);
	// //КонецЦикла; 
	
	//Сериализуем массив в JSON
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,массив);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	//Формируем ответ веб-клиенту
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type","application/JSON; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета,КодировкаТекста.UTF8,
	ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ; 	 
	//http://localhost/testdb/ru_RU/hs/tgbot/getCatalog
КонецФункции

Функция getCatalogTree(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	Запрос = Новый Запрос;
	
	Запросы = "
	|ВЫБРАТЬ
	|	Номенклатура.Родитель.Код КАК РодительКод,
	|	Номенклатура.Родитель КАК Родитель,
	|	Номенклатура.Код КАК ГруппаКод,
	|	Номенклатура.Ссылка КАК Группа
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	Группа
	|";
	
	
	
	Запрос.Текст = Запросы;
	РЗ = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РЗ.Выбрать();
	
	МассивДанных = Новый Массив;
	сч=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		данные = Новый Структура;
		
		данные.Вставить("HeadGroupID",СокрЛП(ВыборкаДетальныеЗаписи.РодительКод)); 
		данные.Вставить("HeadGroupName", СокрЛП(ВыборкаДетальныеЗаписи.Родитель));
		данные.Вставить("GroupID",СокрЛП(ВыборкаДетальныеЗаписи.ГруппаКод)); 
		данные.Вставить("GroupName", СокрЛП(ВыборкаДетальныеЗаписи.Группа));
				
		МассивДанных.Добавить(данные);
		
	КонецЦикла;

	ЗаписьJSON	= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,МассивДанных);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	//Формируем ответ веб-клиенту
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type","application/JSON; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета,КодировкаТекста.UTF8,
	ИспользованиеByteOrderMark.НеИспользовать);

	
	Возврат Ответ;
КонецФункции

Функция getProductImages(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	ProductID=Запрос["ПараметрыЗапроса"].Получить("ProductID");
	
	
	Если ProductID=Неопределено Тогда  Возврат Ответ; КонецЕсли;
	
	Номенклатура=Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ProductID));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Наименование,
		|	ХранилищеДополнительнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект
		|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)";
	
	Запрос.УстановитьПараметр("Объект", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	данные = Новый Структура;
	данные.Вставить("ProductID", СокрЛП(Номенклатура.Код));
	данные.Вставить("ProductImage", "");
	
	нп=1;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
			Изображение=ВыборкаДетальныеЗаписи.Ссылка.Хранилище.Получить();
			
			Если НЕ Изображение=Неопределено Тогда 
				ФотоBase64 = Base64Строка(Изображение.ПолучитьДвоичныеДанные());
				ФотоBase64 = СтрЗаменить(ФотоBase64, Символы.ВК, "");
				ФотоBase64 = СтрЗаменить(ФотоBase64, Символы.ПС, "");
			Иначе 
				ФотоBase64="";	
			КонецЕсли;
			
			Если ВыборкаДетальныеЗаписи.Наименование=Номенклатура.ОсновноеИзображение.Наименование Тогда 
				
				данные.ProductImage=ФотоBase64;
				
			иначе
				
				данные.Вставить("ProductImage"+СокрЛП(нп), ФотоBase64);	
				нп=нп+1;
			КонецЕсли;	
		
	КонецЦикла;
	
	
	//Сериализуем массив в JSON
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,данные);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	//Формируем ответ веб-клиенту
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type","application/JSON; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета,КодировкаТекста.UTF8,
	ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПолучитьПользователейВФорматеJSON()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |   Контрагенты.Код КАК ID,
	    |   ContactInfo.Представление КАК Phone, 	    
		|   Контрагенты.ТелефонCARDPR КАК Phone2,
	    |   ContactInfo2.Представление КАК Email,
	    |   Контрагенты.ИНН КАК INN,
	    |   Контрагенты.КПП КАК KPP, 
	    |   Контрагенты.Покупатель КАК IsBuyer,
	    |   Контрагенты.Поставщик КАК IsVendor, 	    
		|   Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен.Ссылка КАК ContractType,         
	    |   Контрагенты.ЮрФизЛицо КАК OrganizationType,          
	    |   Контрагенты.ОсновнойБанковскийСчет.СуммаБезКопеек КАК Balance,
	    |   Контрагенты.НаименованиеПолное КАК Fullname
	    |ИЗ
	    |   Справочник.Контрагенты КАК Контрагенты
        |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ContactInfo
        |	ПО Контрагенты.Ссылка = ContactInfo.Объект
        |	И ContactInfo.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
    	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ContactInfo2
        |	ПО Контрагенты.Ссылка = ContactInfo2.Объект
        |	И ContactInfo2.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивПользователей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 		     
		СтруктураПользователя = Новый Структура();
        СтруктураПользователя.Вставить("ID", СокрЛП(Строка(Выборка.ID)));
        СтруктураПользователя.Вставить("FullName", СокрЛП(Строка(Выборка.Fullname)));
		Если Строка(Выборка.Email) <> "" Тогда
			СтруктураПользователя.Вставить("Email", СокрЛП(Строка(Выборка.Email))); 
		КонецЕсли;
		Если Строка(Выборка.Phone) <> "" Тогда
			СтруктураПользователя.Вставить("Phone", СокрЛП(Строка(Выборка.Phone)));
		Иначе
			СтруктураПользователя.Вставить("Phone", СокрЛП(Строка(Выборка.Phone2)));
		КонецЕсли;
        
        Если Строка(Выборка.INN) <> "" Тогда
            СтруктураПользователя.Вставить("INN", СокрЛП(Строка(Выборка.INN)));          
            СтруктураПользователя.Вставить("KPP", СокрЛП(Строка(Выборка.KPP)));
        КонецЕсли;          
        СтруктураПользователя.Вставить("OrganizationType", СокрЛП(Строка(Выборка.OrganizationType)));
        СтруктураПользователя.Вставить("ContractType", СокрЛП(Строка(Выборка.ContractType)));              
        СтруктураПользователя.Вставить("IsVendor", СокрЛП(Строка(Выборка.IsVendor)));
        Если Строка(Выборка.Balance) <> "" И Строка(Выборка.Balance) <> "Нет"  Тогда
            СтруктураПользователя.Вставить("Balance", СокрЛП(Строка(Выборка.Balance)));
        КонецЕсли;
        СтруктураПользователя.Вставить("IsBuyer", СокрЛП(Строка(Выборка.IsBuyer)));
		МассивПользователей.Добавить(СтруктураПользователя);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивПользователей);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Возврат СтрокаДляОтвета;
КонецФункции

Функция getUsers(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтрокаДляОтвета = ПолучитьПользователейВФорматеJSON();
	
	Ответ.Заголовки.Вставить("Content-type","application/JSON; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции


Функция getOrdersHistory(Запрос) 	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ClientID = Запрос["ПараметрыЗапроса"].Получить("ClientID");
	 	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
        "ВЫБРАТЬ                        
        |    Заказы.Комментарий,            
        |    Заказы.ДатаОплаты,  
        |    Заказы.Контрагент.Код КАК КодКонтрагента,
        |    Заказы.Контрагент КАК ИмяКонтрагента,
        |    Заказы.СуммаВключаетНДС,
        |    Заказы.СуммаДокумента,
        |    Заказы.ТипЦен.ВалютаЦены КАК ТипЦен,
        |    Заказы.СкладГруппа,
        |    Заказы.ВалютаДокумента,
        |    Заказы.Ссылка
        |ИЗ
        |    Документ.ЗаказПокупателя КАК Заказы";
	Если ЗначениеЗаполнено(ClientID) Тогда
        Запрос.Текст = Запрос.Текст + " ГДЕ Заказы.Контрагент.Код = &ClientID";
        Запрос.УстановитьПараметр("ClientID", СокрЛП(ClientID));
    КонецЕсли;
    
    РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ИсторияЗаказов = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураЗаказа = Новый Структура;
		СтруктураЗаказа.Вставить("OrderID", СокрЛП(Строка(ВыборкаДетальныеЗаписи.Ссылка)));
		СтруктураЗаказа.Вставить("ContragentID", СокрЛП(Строка(ВыборкаДетальныеЗаписи.КодКонтрагента)));		
		СтруктураЗаказа.Вставить("ContragentName", СокрЛП(Строка(ВыборкаДетальныеЗаписи.ИмяКонтрагента)));
		СтруктураЗаказа.Вставить("PaymentDate", СокрЛП(Строка(ВыборкаДетальныеЗаписи.ДатаОплаты)));
		СтруктураЗаказа.Вставить("Comment", СокрЛП(Строка(ВыборкаДетальныеЗаписи.Комментарий)));
		СтруктураЗаказа.Вставить("Amount", Число(ВыборкаДетальныеЗаписи.СуммаДокумента)); 		
		СтруктураЗаказа.Вставить("StoreGroup", СокрЛП(Строка(ВыборкаДетальныеЗаписи.СкладГруппа))); 
		СтруктураЗаказа.Вставить("PriceType", СокрЛП(Строка(ВыборкаДетальныеЗаписи.ТипЦен))); 
		СтруктураЗаказа.Вставить("Currency", СокрЛП(Строка(ВыборкаДетальныеЗаписи.ВалютаДокумента))); 
		ИсторияЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ИсторияЗаказов);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Ответ.Заголовки.Вставить("Content-type","application/JSON; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции 

Функция getUser(Запрос)
    Ответ = Новый HTTPСервисОтвет(200);
    
    ClientID = Запрос["ПараметрыЗапроса"].Получить("ClientID");
    
    Если ClientID = Неопределено Тогда
        Ответ.УстановитьТелоИзСтроки("Not found", "utf-8");
        Возврат Ответ;
    КонецЕсли;
    
    Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(ClientID));
    
    Если Контрагент = Неопределено Тогда
        Ответ.УстановитьТелоИзСтроки("Not found", "utf-8");
        Возврат Ответ;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Контрагенты.Код КАК ID,
        |   ContactInfo.Представление КАК Phone,        
		|   ContactInfo2.Представление КАК Email,
        |   Контрагенты.ИНН КАК INN,
        |   Контрагенты.КПП КАК KPP, 
        |   Контрагенты.Покупатель КАК IsBuyer,
        |   Контрагенты.Поставщик КАК IsVendor,
        |   Контрагенты.ТелефонCARDPR КАК Phone2,
        |   Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен.Ссылка КАК ContractType,         
		|   Контрагенты.ЮрФизЛицо КАК OrganizationType,          
        |   Контрагенты.ОсновнойБанковскийСчет.СуммаБезКопеек КАК Balance,
        |   Контрагенты.НаименованиеПолное КАК Fullname
        |ИЗ
        |   Справочник.Контрагенты КАК Контрагенты
        |   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ContactInfo
        |       ПО Контрагенты.Ссылка = ContactInfo.Объект
        |       И ContactInfo.Вид = &ContactInfo
        |   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ContactInfo2
		|       ПО Контрагенты.Ссылка = ContactInfo2.Объект
		|       И ContactInfo2.Вид = &ContactInfo2

        |ГДЕ
        |   Контрагенты.Ссылка = &Контрагент";
    
    Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ContactInfo", "Телефон");	
	Запрос.УстановитьПараметр("ContactInfo2", "E-Mail");

    
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    
    Если Выборка.Следующий() Тогда
        СтруктураПользователя = Новый Структура();
        СтруктураПользователя.Вставить("ID", СокрЛП(Строка(Выборка.ID)));
        СтруктураПользователя.Вставить("FullName", СокрЛП(Строка(Выборка.Fullname)));
		Если Строка(Выборка.Email) <> "" Тогда
			СтруктураПользователя.Вставить("Email", СокрЛП(Строка(Выборка.Email))); 
		КонецЕсли;
		Если Строка(Выборка.Phone) <> "" Тогда
			СтруктураПользователя.Вставить("Phone", СокрЛП(Строка(Выборка.Phone)));
		Иначе
			СтруктураПользователя.Вставить("Phone", СокрЛП(Строка(Выборка.Phone2)));
		КонецЕсли;
        
        Если Строка(Выборка.INN) <> "" Тогда
            СтруктураПользователя.Вставить("INN", СокрЛП(Строка(Выборка.INN)));          
            СтруктураПользователя.Вставить("KPP", СокрЛП(Строка(Выборка.KPP)));
        КонецЕсли;          
        СтруктураПользователя.Вставить("OrganizationType", СокрЛП(Строка(Выборка.OrganizationType)));
        СтруктураПользователя.Вставить("ContractType", СокрЛП(Строка(Выборка.ContractType)));              
        СтруктураПользователя.Вставить("IsVendor", СокрЛП(Строка(Выборка.IsVendor)));
        Если Строка(Выборка.Balance) <> "" И Строка(Выборка.Balance) <> "Нет"  Тогда
            СтруктураПользователя.Вставить("Balance", СокрЛП(Строка(Выборка.Balance)));
        КонецЕсли;
        СтруктураПользователя.Вставить("IsBuyer", СокрЛП(Строка(Выборка.IsBuyer)));
    КонецЕсли;

    ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON, СтруктураПользователя);
    СтрокаДляОтвета = ЗаписьJSON.Закрыть();

    Ответ.Заголовки.Вставить("Content-type", "application/JSON; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

    Возврат Ответ;
КонецФункции

Функция getUsersByParams(Запрос)     		
	Email = Запрос["ПараметрыЗапроса"].Получить("Email");
	Phone = Запрос["ПараметрыЗапроса"].Получить("Phone");
	INN = Запрос["ПараметрыЗапроса"].Получить("INN");
	KPP = Запрос["ПараметрыЗапроса"].Получить("KPP");
	FullName = Запрос["ПараметрыЗапроса"].Получить("FullName");

	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Код КАК ID,
		|	Контрагенты.АдресЭП КАК Email1,
		|	Контрагенты.ТелефонCARDPR КАК Phone1,
		|	ContactInfoP.Представление КАК Phone2,
		|	ContactInfoE.Представление КАК Email2,
		|	Контрагенты.ИНН,
		|	Контрагенты.КПП,
		|	Контрагенты.Покупатель КАК IsBuyer,
		|	Контрагенты.Поставщик КАК IsVendor,
		|	Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен.Ссылка КАК ContractType,
		|	Контрагенты.ЮрФизЛицо КАК OrganizationType,
		|	Контрагенты.ОсновнойБанковскийСчет.СуммаБезКопеек КАК Balance,
		|	Контрагенты.НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ContactInfoP
		|		ПО Контрагенты.Ссылка = ContactInfoP.Объект
		|			И (ContactInfoP.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ContactInfoE
		|		ПО Контрагенты.Ссылка = ContactInfoE.Объект
		|			И (ContactInfoE.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)))
		|ГДЕ
		|	1 = 1";

	Если ЗначениеЗаполнено(Email) Тогда
		ТекстЗапроса = ТекстЗапроса + " И (ContactInfoE.Представление ПОДОБНО &Email ИЛИ Контрагенты.АдресЭП ПОДОБНО &Email)";
		Запрос.УстановитьПараметр("Email", Email);
	КонецЕсли;

	Если ЗначениеЗаполнено(Phone) Тогда
		ТекстЗапроса = ТекстЗапроса + " И (Контрагенты.ТелефонCARDPR ПОДОБНО &Phone ИЛИ ContactInfoP.Представление ПОДОБНО &Phone)";
		Запрос.УстановитьПараметр("Phone", Phone);
	КонецЕсли;

	Если ЗначениеЗаполнено(INN) Тогда
		ТекстЗапроса = ТекстЗапроса + " И Контрагенты.ИНН = &INN";
		Запрос.УстановитьПараметр("INN", INN);
	КонецЕсли;

	Если ЗначениеЗаполнено(KPP) Тогда
		ТекстЗапроса = ТекстЗапроса + " И Контрагенты.КПП = &KPP";
		Запрос.УстановитьПараметр("KPP", KPP);
	КонецЕсли;

	Если ЗначениеЗаполнено(FullName) Тогда
		ТекстЗапроса = ТекстЗапроса + " И Контрагенты.НаименованиеПолное ПОДОБНО &FullName";
		Запрос.УстановитьПараметр("FullName", FullName);
	КонецЕсли;
	
	Запрос.Текст=ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	
	Выборка = РезультатЗапроса.Выбрать();

	МассивКонтрагентов = Новый Массив;

	Пока Выборка.Следующий() Цикл
	    СтруктураКонтрагента = Новый Структура;
	    СтруктураКонтрагента.Вставить("ID", Выборка.ID);
	    СтруктураКонтрагента.Вставить("Email1", Выборка.Email1);		
		СтруктураКонтрагента.Вставить("Email2", Выборка.Email2);
	    СтруктураКонтрагента.Вставить("Phone1", Выборка.Phone1); 	    
		СтруктураКонтрагента.Вставить("Phone2", Выборка.Phone2);
	    СтруктураКонтрагента.Вставить("INN", Выборка.ИНН);
	    СтруктураКонтрагента.Вставить("KPP", Выборка.КПП);
	    СтруктураКонтрагента.Вставить("FullName", Выборка.НаименованиеПолное);
		СтруктураКонтрагента.Вставить("OrganizationType", СокрЛП(Строка(Выборка.OrganizationType)));
        СтруктураКонтрагента.Вставить("ContractType", СокрЛП(Строка(Выборка.ContractType)));              
        СтруктураКонтрагента.Вставить("IsVendor", СокрЛП(Строка(Выборка.IsVendor)));
        Если Строка(Выборка.Balance) <> "" И Строка(Выборка.Balance) <> "Нет"  Тогда
            СтруктураКонтрагента.Вставить("Balance", СокрЛП(Строка(Выборка.Balance)));
        КонецЕсли;
        СтруктураКонтрагента.Вставить("IsBuyer", СокрЛП(Строка(Выборка.IsBuyer)));
	    МассивКонтрагентов.Добавить(СтруктураКонтрагента);
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
    ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON, МассивКонтрагентов);
    СтрокаДляОтвета = ЗаписьJSON.Закрыть();

    Ответ.Заголовки.Вставить("Content-type", "application/JSON; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

    Возврат Ответ;
Возврат Ответ;


КонецФункции

Функция CreateOrder(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	//	//ПРИМЕР ТЕЛО ЗАПРОСА JSON
	//	{
	//	 "ClientID": "DI0000405",
	//   "StoreID": "000000001",
	//   "Products": [
	//  {
	//	 "ProductID": "DI000001541",
	//   "Quantity": 10,
	//   "Price": 150,
	//   "Sum": 1500
	//  },
	//  {
	//   "ProductID": "DI000003750",
	//   "Quantity": 3,
	//   "Price": 200,
	//   "Sum": 600
	//  }
	//  ]
	//  }
	
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);	
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	Попытка
		ВходящиеДанные = ПрочитатьJSON(ЧтениеJSON);
		//шапка документа
		ЗаказПокупателя=Документы.ЗаказПокупателя.СоздатьДокумент();
		ЗаказПокупателя.Дата=ТекущаяДата();
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаказПокупателя,ПараметрыСеанса.ТекущийПользователь);
		ЗаказПокупателя.Организация=Справочники.Организации.НайтиПоКоду("000000003"); //ИП Рыбкина Наталья Владимировна
		ЗаказПокупателя.Контрагент=Справочники.Контрагенты.НайтиПоКоду(СокрЛП(ВходящиеДанные.ClientID));
		ЗаказПокупателя.ДоговорКонтрагента=ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ЗаказПокупателя.Организация,ЗаказПокупателя.Контрагент);
		ЗаказПокупателя.СкладГруппа=Справочники.Склады.НайтиПоКоду(СокрЛП(ВходящиеДанные.StoreID));
		ЗаказПокупателя.Комментарий="Загружен с бота";
		
		// табличная часть товары
		ТабличнаяЧастьТовары=ЗаказПокупателя.Товары;
		
		Для Каждого СтрокаТоваров из ВходящиеДанные.Products Цикл 
			НоваяСтрока=ТабличнаяЧастьТовары.Добавить();	
			НоваяСтрока.Номенклатура=Справочники.Номенклатура.НайтиПоКоду(СокрЛП(СтрокаТоваров.ProductID));
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ЗаказПокупателя);
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЗаказПокупателя, "Реализация");
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрока, ЗаказПокупателя, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
			
			НоваяСтрока.Количество=СтрокаТоваров.Quantity;
			НоваяСтрока.Цена=СтрокаТоваров.Price;
			НоваяСтрока.Сумма=СтрокаТоваров.Sum;
		КонецЦикла;
		
		ЗаказПокупателя.Записать();
		
	Исключение
		ВходящиеДанные = "";
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("MessageError",ОписаниеОшибки());
		
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
		Возврат Новый HTTPСервисОтвет(400);
	КонецПопытки;
	
	
	Возврат Ответ;

КонецФункции
