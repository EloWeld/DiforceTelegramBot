from typing import Optional, Tuple, Union

import Levenshtein
from etc.helpers import rdotdict
from loader import MDB
from services.oneService import OneService
from dotdict import dotdict
from func_timeout import func_timeout, FunctionTimedOut
from loggerConf import logger

class GoodsService:
    @staticmethod
    def GetTargetPrice(user, good):
        try:
            if user['opt'] == None:
                return good['Price']
            else:
                return good['Price' + user['opt']]
        except Exception as e:
            logger.error(f"{e}, {good}, {user}")

    @staticmethod
    def GetCategoriesTree() -> rdotdict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ `rdotdict`, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.
        """
        result = MDB.Settings.find_one(dict(id="Catalog"))
        result = rdotdict(result['catalog'])
        return result

    @staticmethod
    def GetCategoryByID(category_id, subgroups=[]) -> Optional[rdotdict]:
        if category_id is None:
            return None
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É `category_id` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç `rdotdict`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–ª–∏ `None`, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
        """
        if category_id in subgroups:
            return rdotdict(subgroups[category_id])

        for group_id in subgroups:
            subgroups2 = subgroups[group_id]['Subgroups']
            if subgroups2:
                result = GoodsService.GetCategoryByID(category_id, subgroups2)
                if result:
                    return result
        return None
    
    @staticmethod
    def GetGoodByID(good_id, with_images=False) -> Union[Tuple[dotdict, list], dotdict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É `good_id` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç `dotdict`, 
        —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ `dotdict`, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, 
        –∏ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä `with_images` —Ä–∞–≤–µ–Ω `True`. 

        –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥, 
        –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        try:
            good = func_timeout(2, OneService.getGood, args=(good_id, True))
        except FunctionTimedOut:
            logger.error('Time expired')
            
            good = MDB.Goods.find_one(dict(ProductID=good_id))
            
        try:
            good['QtyInStore'] = [x for x in good['QuantityInStores'] if x['store_id'] == "000000001"][0]['quantity']
        except Exception:
            good['QtyInStore'] = 0

        if with_images:
            try:
                images = func_timeout(
                    5, OneService.getGoodImages, args=(good_id,))
            except FunctionTimedOut:
                logger.error('Time expired')
                images = []
            return dotdict(good), images
        return dotdict(good)

    @staticmethod
    def LevenshteinDistance(s1, s2) -> int:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ `s1` –∏ `s2` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.
        """
        return Levenshtein.distance(s1, s2)

    @staticmethod
    def SearchCatalog(keyword, threshold=3, group_id=None) -> list:
        """
        –ò—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É `keyword`, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ —Å –ø–æ—Ä–æ–≥–æ–º `threshold`. –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä `group_id` –Ω–µ —É–∫–∞–∑–∞–Ω, –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ OneService. –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä `group_id` —É–∫–∞–∑–∞–Ω, –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞.
        """
        if not group_id:
            catalog = OneService.getCatalog(group_id=group_id)
        else:
            catalog = [rdotdict(x) for x in list(MDB.Goods.find())]
        matching_items = []

        for item in catalog:
            distance = GoodsService.LevenshteinDistance(
                item['ProductName'].lower(), keyword.lower())
            if distance <= threshold:
                item['l_distance'] = distance
                matching_items.append(item)

        return sorted(matching_items, key=lambda x: x['l_distance'])

    @staticmethod
    def SpecifyColorEmoji(good):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–±—ä–µ–∫—Ç `good` –≤ –ø–æ–ª–µ `ColorEmoji`.
        """
        good['ColorEmoji'] = ""
        try:
            colors = {
                '—Ä–æ–∑–æ–≤–æ–µ –∑–æ–ª–æ—Ç–æ': 'üå∏‚ú®',
                '—á—ë—Ä–Ω—ã–π': '‚ö´Ô∏è',
                '—á–µ—Ä–Ω—ã–π': '‚ö´Ô∏è',
                '–±–µ–ª—ã–π': '‚ö™Ô∏è',
                '–∫—Ä–∞—Å–Ω—ã–π': 'üî¥',
                '—Å–∏–Ω–∏–π': 'üîµ',
                '–∂—ë–ª—Ç—ã–π': 'üü°',
                '–∑–µ–ª—ë–Ω—ã–π': 'üü¢',
                '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': 'üü†',
                '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'üü£',
                '–∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω—ã–π': 'üî¥+‚ö´Ô∏è',
                '—Ä–æ–∑–æ–≤—ã–π': 'üå∏',
                '—Å–µ—Ä—ã–π': 'üîò',
                '–±–∏—Ä—é–∑–æ–≤—ã–π': 'üê¨',
                '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π': 'ü•à',
                '–∑–æ–ª–æ—Ç–æ–π': 'ü•á',
                '–±—Ä–æ–Ω–∑–æ–≤—ã–π': 'ü•â',
                '–±–µ–∂–µ–≤—ã–π': 'üê™',
                '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'üü´',
                '—Å–∞–ª–∞—Ç–æ–≤—ã–π': 'ü•ó',
                '—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π': '‚ö™Ô∏è+üîò',
                '—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π': 'ü•à',
                '–±–µ–ª–æ-—Å–µ—Ä—ã–π': '‚ö™Ô∏è+üîò',
                '—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π': 'üü£+üå∏',
                '–∫—Ä–∞—Å–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'üî¥+üü´',
                '—Å–µ—Ä–µ–±—Ä—è–Ω–æ-–±–µ–ª—ã–π': 'ü•à+‚ö™Ô∏è',
                '—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π': 'üåë',
                '—Å–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π': 'üå∏+‚ö™Ô∏è',
                '–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π': 'ü•á',
                '–∑–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π': 'üåø',
                '—Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π': 'üå≤',
                '–±–µ–∂': 'üê™',
                '—Ç–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'üêª',
                '–º–∞–ª–∏–Ω–æ–≤—ã–π': 'üçá',
                '—Ä–æ–∑–æ–≤–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'üå∏+üü£',
                '–∫–æ—Ä–∞–ª–ª–æ–≤—ã–π': 'üêö',
                '–ª–∞–≤–∞–Ω–¥–æ–≤—ã–π': 'üíú',
                '—Å–∏—Ä–µ–Ω–µ–≤—ã–π': 'üå∏+üü£',
                '—Ö–∞–∫–∏': 'üçÇ',
                '—Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π': 'üå±',
                '—Å–µ—Ä–æ-–∑–µ–ª–µ–Ω—ã–π': 'üåø+üîò',
                '–∫—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π': 'üî¥+üå∏',
                '–≥–æ–ª—É–±–æ–π': 'ü¶ã',
                '–ª–∏–º–æ–Ω–Ω—ã–π': 'üçã',
                '–±–µ–ª–æ-–≥–æ–ª—É–±–æ–π': '‚ö™Ô∏è+ü¶ã',
                '—Å–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π': 'üü°+‚ö™Ô∏è',
                '–º–∞—Ç–æ–≤—ã–π —á–µ—Ä–Ω—ã–π': '‚ö´Ô∏è+üå´Ô∏è',
                '–º–∞—Ç–æ–≤—ã–π —Å–µ—Ä—ã–π': 'üîò+üå´Ô∏è',
                '–º–∞—Ç–æ–≤—ã–π –±–µ–∂–µ–≤—ã–π': 'üê™+üå´Ô∏è',
                '–º–∞—Ç–æ–≤—ã–π –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'üü´+üå´Ô∏è',
                '–º–∞—Ç–æ–≤—ã–π —Å–∏–Ω–∏–π': 'üîµ+üå´Ô∏è',
                '–º–∞—Ç–æ–≤—ã–π –∑–µ–ª–µ–Ω—ã–π': 'üü¢+üå´Ô∏è',
                '–º–∞—Ç–æ–≤—ã–π –∫—Ä–∞—Å–Ω—ã–π': 'üî¥+üå´Ô∏è',
                '–º–∞—Ç–æ–≤—ã–π –±–µ–ª—ã–π': '‚ö™Ô∏è+üå´Ô∏è',
                '–≥—Ä–∞–Ω–∞—Ç–æ–≤—ã–π': 'üçá',
                '—Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π': 'üê≥',
                '—Å–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'üå∏+üü£+‚ö™Ô∏è',
                '–≥–æ–ª—É–±–æ–≤–∞—Ç–æ-—Å–µ—Ä—ã–π': 'üîò+ü¶ã',
                '—Å–µ—Ä–æ-—Å–∏–Ω–∏–π': 'üîµ+üîò',
                '–ª–∏–ª–æ–≤—ã–π': 'üü£',
                '–∫—Ä–µ–º–æ–≤—ã–π': 'üç¶',
                '–∫—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π': 'üü†+üî¥',
                '—Å–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'üü£+‚ö™Ô∏è',
                '–∂–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π': 'üü¢+üü°',
                '–∫—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π': 'üî¥+üå∏',
                '–æ—Ä–∞–Ω–∂–µ–≤–æ-–∂–µ–ª—Ç—ã–π': 'üü†+üü°',
                '–±–µ–∂–µ–≤–æ-—Å–µ—Ä—ã–π': 'üê™+üîò',
                '—Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'üü´+‚ö™Ô∏è',
                '–∫—Ä–∞—Å–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤–æ-–∂–µ–ª—Ç—ã–π': 'üî¥+üü´+üü°',
                '–±–∞–∫–ª–∞–∂–∞–Ω–æ–≤—ã–π': 'üçÜ',
                '–∑–æ–ª–æ—Ç–∏—Å—Ç–æ-–±–µ–∂–µ–≤—ã–π': 'ü•á+üê™',
                '—Ñ–∏—Å—Ç–∞—à–∫–æ–≤—ã–π': 'üåø',
                '—Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π': 'ü¶ã+üîò',
                '–±–∏—Ä—é–∑–æ–≤–æ-–∑–µ–ª–µ–Ω—ã–π': 'üü¢+üê¨',
                '–≥–æ–ª—É–±–æ–≤–∞—Ç–æ-–∑–µ–ª–µ–Ω—ã–π': 'üü¢+ü¶ã',
                '–º–æ–ª–æ—á–Ω–æ-–±–µ–ª—ã–π': 'üçº',
                '–ø–µ—Ä—Å–∏–∫–æ–≤—ã–π': 'üçë',
                '–ø–µ—Å–æ—á–Ω—ã–π': 'üèú',
                '–∑–µ–ª–µ–Ω–æ–≤–∞—Ç–æ-—Å–µ—Ä—ã–π': 'üîò+üü¢',
                '–∫—Ä–∞—Å–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'üî¥+üü£',
                '–∫–æ—Ä–∏—á–Ω—ã–π': 'üü´',
                '—Ö–∞–∫–∏-–∑–µ–ª–µ–Ω—ã–π': 'üü¢+üü´',
                '—Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π': 'üî¥+‚ö™Ô∏è',
                '—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π': 'üîò+üåö',
                '—Å–≤–µ—Ç–ª–æ-–±–∏—Ä—é–∑–æ–≤—ã–π': 'üü¢+‚ö™Ô∏è',
                '–±–∏—Ä—é–∑–æ–≤—ã–π': 'üê¨',
                '–æ–ª–∏–≤–∫–æ–≤—ã–π': 'ü´í',
                '–±–∏—Ä—é–∑–æ–≤—ã–π': 'üü¶',
                '—Å–≤–µ—Ç–ª–æ-–ª–∏–ª–æ–≤—ã–π': 'üü£+‚ö™Ô∏è',
                '–ª–æ—Å–æ—Å–µ–≤—ã–π': 'üêü',
                '–≥–æ–ª—É–±–æ–π —Å–∞–ø—Ñ–∏—Ä': 'üíé',
                '—Ñ—É–∫—Å–∏—è': 'üå∏',
                '–∑–µ–ª–µ–Ω—ã–π —á–∞–π': 'üçµ',
                '–ª–∞–π–º': 'üçã+üü¢',
                '–∫—Ä–∞—Å–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'üî¥+üü´',
                '–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π': 'üèÜ',
                '–±—Ä–æ–Ω–∑–æ–≤—ã–π': 'üèÖ',
                '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π': 'ü•à',
                '–±–µ–ª—ã–π': '‚ö™Ô∏è',
                '—á–µ—Ä–Ω—ã–π': '‚ö´Ô∏è',
                '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'üü´',
                '—Ä–æ–∑–æ–≤—ã–π': 'üå∏',
                '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'üü£',
                '–∂–µ–ª—Ç—ã–π': 'üü°',
                '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': 'üü†',
                '–∑–µ–ª–µ–Ω—ã–π': 'üü¢',
                '–≥–æ–ª—É–±–æ–π': 'üîµ',
                '—Å–µ—Ä—ã–π': 'üîò'}

            if good['ColorName'].lower() in colors:
                good['ColorEmoji'] = colors[good['ColorName'].lower()]
        except Exception as e:
            logger.error(e)
            
        return good['ColorEmoji']
