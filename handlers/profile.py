import datetime
import traceback
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher.filters import Text
import loguru
from etc.helpers import rdotdict
from etc.keyboards import Keyboards
from services.goodsService import GoodsService
from services.oneService import OneService
from services.orderService import OrderService
from services.textService import Texts
from services.userService import UserService
from loader import dp
from utils import cutText


@dp.callback_query_handler(lambda call: call.data.startswith('see_order:'))
async def order_info(call: CallbackQuery):
    order_id = call.data.split(':')[1]
    user_id = call.data.split(':')[2]
    order = OrderService.Get(order_id, user_id)
    order_items_text = '\n'.join(f"[{product['qty']} —à—Ç.] * <a href='https://t.me/DiforceBot?start=good_{product['id']}'>{cutText(product['name'], 30):30}</a> = <code>{product['summary']:,}‚ÇΩ</code>" for product in order['items'])
    order_text = f"""–ó–∞–∫–∞–∑ ‚Ññ<code>{order.id}</code>\n
–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: <code>{order.created_at.strftime('%Y-%m-%d %H:%M:%S')}</code>

{"ü§ñ –ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –±–æ—Ç–∞" if order.created_with_bot else "üåê –ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–∞–π—Ç"}

–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <code>{order['amount']:,}‚ÇΩ</code>
–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
{
    order_items_text
}
"""f"" 

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"
    await call.message.edit_text(order_text, reply_markup=Keyboards.OrderInfo(order))
    
@dp.callback_query_handler(lambda c: c.data.startswith("repeat_order:"), state="*")
async def repeat_order(c: CallbackQuery, state: FSMContext):
    if state:
        await state.finish()
    user_id = c.from_user.id
    user = UserService.Get(user_id)

    order_id = int(c.data.split(":")[1])
    order = OrderService.Get(order_id, user.diforce_data.ID)
    order_items = order.items
    # –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –≤—ã–≤–æ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await check_order_availability_and_show_warnings(order_items, user_id)
    # –ó–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    await edit_order(order_id, user_id)


def check_availability(item):
    good = GoodsService.GetGoodByID(item['id'])
    quantity_in_stores = sum([x['quantity'] for x in good['QuantityInStores']])
    return quantity_in_stores > 0


def check_order_availability_and_show_warnings(order):
    warnings = []
    for item in order.items:
        # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ item –≤ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        availability = check_availability(item)
        if not availability:
            warnings.append(f"–¢–æ–≤–∞—Ä {item['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    return warnings

async def edit_order(order_id, user_id):
    # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∑–≤–æ–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    pass


@dp.callback_query_handler(lambda call: call.data.startswith('profile'))
async def order_info(c: CallbackQuery):
    options = c.data.split(':')
    if len(options) == 1:
        # Profile
        user_id = c.from_user.id
        user = UserService.Get(user_id)
        text = f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.fullname}\n"
        if user.is_authenticated:
            text += "\n<b>‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ</b>\n"
        await c.message.edit_text(text=text, reply_markup=Keyboards.Profile(user))
    elif options[1] == "orders_history":
        user_id = c.from_user.id
        user = UserService.Get(user_id)
        
        if not user['diforce_data']:
            await c.answer(Texts.YouAreLoggedOut, show_alert=True)
            return
        
        d_orders = OrderService.GetOrdersByUser(user)
        
            
        if not d_orders:
            await c.answer(Texts.YourOrdersHistoryIsEmpty, show_alert=True)
            return
        await c.message.edit_text(Texts.YourOrderHistory, reply_markup=Keyboards.OrderHistory(d_orders, user.diforce_data.ID))
        
    elif options[1] == "logout_popup":
        await c.message.answer(Texts.LogoutPopupText, reply_markup=Keyboards.Popup("profile:logout"))        
        await c.answer()
    elif options[1] == "logout":
        user_id = c.from_user.id
        user = UserService.Get(user_id)
        user['is_authenticated'] = False
        user['diforce_data'] = None
        UserService.Update(user)
        await c.message.answer(Texts.YouLoggedOut, reply_markup=Keyboards.startMenu(user))
        await c.message.delete()
    

@dp.message_handler(Text(Texts.Profile), state="*")
async def show_personal_cabinet(m: Message, state: FSMContext):
    if state:
        await state.finish()
    user_id = m.from_user.id
    user = UserService.Get(user_id)
    text = f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.fullname}\n"
    if user.is_authenticated:
        text += "\n<b>‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ</b>\n"
    await m.answer(text=text, reply_markup=Keyboards.Profile(user))
