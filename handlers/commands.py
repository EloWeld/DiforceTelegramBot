from io import BytesIO
import os
import loguru
import requests
from etc.filters import AntiSpam
from etc.keyboards import Keyboards
from loader import MDB, dp, bot

from aiogram import Bot, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, CommandStart
from aiogram.types import Message, ChatType, BotCommand, InputFile
from services.textService import Texts

from services.userService import UserService
from services.xlsxService import XLSXService

####################################################################
###  ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ  ###
###  ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà  ###
####################################################################
admin_commands = dict(
    updateTexts = "–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω—ã –≤ –ë–î",
    priceList="–û—Ç—Å—ã–ª–∞–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
    catalogToExcel="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç xlsx –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã",
)

@dp.message_handler(Command("updateTexts"), AntiSpam(), state="*")
async def _(m: Message, command: Command.CommandObj, state: FSMContext):
    if state:
        await state.finish()
    user = UserService.Get(m.from_user.id)
    if 'admin' in user.roles or user.is_admin:
        loguru.logger.info(f"Updating text in databse with defaults")

        MDB.Settings.update_one(dict(id="Texts"), {"$set": Texts.ALL})
        await m.answer("–ì–æ—Ç–æ–≤–æ")

        loguru.logger.success(f"‚úÖ Done")

@dp.message_handler(Command("priceList"), AntiSpam(), state="*")
async def get_price_list(m: Message, command: Command.CommandObj, state: FSMContext):
    if state:
        await state.finish()
        
    user = UserService.Get(m.from_user.id)
    loguru.logger.info(f"Sending price opt list to user: {user.id}|@{user.username}")
    response = requests.get("https://diforce.ru/price.xlsx")
    if response.status_code == 200:
        print(response.content)
        with open("pricesOpt.xlsx", 'wb') as o:
            o.write(response.content)

        await bot.send_document(chat_id=m.chat.id, document=InputFile('pricesOpt.xlsx'))
    else:
        await m.answer("üï∏Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
        

@dp.message_handler(Command("catalogToExcel"), AntiSpam(), state="*")
async def get_price_list(m: Message, command: Command.CommandObj, state: FSMContext):
    if state:
        await state.finish()
        
    user = UserService.Get(m.from_user.id)
    if "admin" in user.roles or user.is_admin:
        loguru.logger.info(f"Generating price list xlsx file for admin")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "‚è≥ –§–∞–π–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è"
        generating_message = await m.reply("‚è≥ –§–∞–π–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è")
        
        file_name = XLSXService.generate_price_xlsx()
        with open(file_name, "rb") as file:
            await m.reply_document(document=InputFile(file), caption="–í–æ—Ç –≤–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx.")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "‚è≥ –§–∞–π–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è"
        await generating_message.delete()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(file_name)
        
        loguru.logger.success(f"‚úÖ Price list xlsx file sent")

@dp.message_handler(Command("help"), AntiSpam(), state="*")
async def help_admin(m: Message, command: Command.CommandObj, state: FSMContext):
    if state:
        await state.finish()
    user = UserService.Get(m.from_user.id)
    if "admin" in user.roles or user.is_admin:
        help_text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥:\n\n"
        for cmd, description in admin_commands.items():
            help_text += f"/{cmd} - {description}\n"
        await m.reply(help_text)